buildscript {
    ext {
        springBootVersion = '1.2.4.RELEASE'
		springCFCloudVersion = '1.1.1.RELEASE'
		springSecurityVersion = '4.0.1.RELEASE'
		springVersion = '4.1.6.RELEASE'
		springEurekaVersion = '1.0.3.RELEASE'
    springCloudStarterParentTrain = 'Angel.SR3'
		junitVersion = '4.12'
		jacksonVersion = '2.5.3'
		mysqlVersion = '5.1.35'
		bootstrapVersion = '2.3.2'
    }

    repositories {
        mavenCentral()
    }

    buildscript {
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            classpath "io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE"
        }
    }
}


// Apply versioning to all projects from versioning script.
allprojects {
	apply from: "$rootDir/gradle/versioning.gradle"

}

subprojects {
    apply plugin: 'java'
	apply plugin: 'jacoco'
  apply plugin: "io.spring.dependency-management"
  apply plugin: 'spring-boot'


	jacoco {
		toolVersion = "0.7.1.201405082137"
	//	reportsDir = file("$buildDir/customJacocoReportDir")
	}
	jacocoTestReport { group = "Reporting"
		description = "Generate Jacoco coverage reports after running tests."
		additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
		}

	test { finalizedBy jacocoTestReport }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencyManagement {
      imports {
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-starter-parent:1.0.0.M1"
      }
    }
	dependencies {
       compile "io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry"
       compile "io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker"
		//test packages

		testCompile "junit:junit:$junitVersion"

	}
}

project(':springboottrades-accounts') {
    jar {
        baseName = 'accounts'
    }
	description = "Micro-service to deal with accounts and user logins"

    dependencies {
		compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		//compile "org.springframework.security:spring-security-web:$springSecurityVersion"
		compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
		//compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"

		// test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"

                // Runtime
		runtime "org.hsqldb:hsqldb"
    }
}

project(':springboottrades-quotes') {
    jar {
        baseName = 'quotes'
    }
	description = "Micro-service to retrieve up to date quotes"
    dependencies {
		compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework:spring-web:${springVersion}"
		//compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"

		//runtime


		//test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"
    }
}

project(':springboottrades-portfolio') {
    jar {
        baseName = 'portfolio'
    }
	description = "Micro-service to manage portfolios"
    dependencies {

		compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
        compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"

		//runtime
		//runtime "mysql:mysql-connector-java:${mysqlVersion}"
		runtime "org.hsqldb:hsqldb"

		//test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testRuntime "com.jayway.jsonpath:json-path:2.0.0"
		testRuntime "org.hsqldb:hsqldb"
    }
}

project(':springboottrades-web') {
    jar {
        baseName = 'web'
    }
	description = "Web interface to the springboot set of services"
    dependencies {
		compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-hystrix:${springEurekaVersion}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile "org.springframework.cloud:spring-cloud-netflix-hystrix-dashboard:${springEurekaVersion}"
		compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE"

		runtime "org.webjars:bootstrap:${bootstrapVersion}"

		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
